image: debian:latest

stages: 
  - static analysis 
  - build
  - test

.cmake_vriables:
  default_cmake_variables: &default_cmake_variables 
    CMAKE_BUILD_DIR: "${CI_PROJECT_DIR}/build"
    CMAKE_BUILD_TYPE: Release 
    CXX: g++
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"
    HESTIA_BUILD_TESTS: "OFF" 
    HESTIA_BUILD_DOCUMENTATION: "OFF"
    HESTIA_DOC_DIR: ""
    HESTIA_DEPENDENCIES: "ca-certificates wget build-essential cmake libssl-dev libcurl4-openssl-dev libxml2-dev git" 

.snippets: 
  - &install_dependencies
    apt-get update -y
    && [[ "${HESTIA_BUILD_TESTS}" = "ON" ]] && HESTIA_DEPENDENCIES="${HESTIA_DEPENDENCIES}" || true
    && apt-get install --no-install-recommends -y ${HESTIA_DEPENDENCIES}
  - &configure 
    mkdir -p "${CMAKE_BUILD_DIR}"
    && pushd "${CMAKE_BUILD_DIR}"
    && ${CI_PROJECT_DIR}/infra/cmake/bootstrap_cmake.sh
    && (
      set -x;
      ${CMAKE_BUILD_DIR}/cmake ..
      -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}"
      -DCMAKE_EXPORT_COMPILE_COMMANDS="${CMAKE_EXPORT_COMPILE_COMMANDS}"
      -DCMAKE_CXX_COMPILER="${CXX}"
      -DHESTIA_BUILD_TESTS="${HESTIA_BUILD_TESTS}"
    )
    && popd
  - &build 
    make -C "${CMAKE_BUILD_DIR}" -j 4 
  - &test
    make -C "${CMAKE_BUILD_DIR}" test

.default_job: &default_job 
  tags: 
    - docker
  variables:
    <<: *default_cmake_variables 
  before_script: 
    - *install_dependencies
  script: 
    - *configure 
    - *build 

Format: 
  <<: *default_job
  stage: static analysis
  variables: 
    <<: *default_cmake_variables 
  before_script: 
    - apt-get update -y
    - apt-get install --no-install-recommends -y
      git
      clang clang-format
  script: 
    - ./tools/run_format.sh
      && git status 
      && git diff-index --quiet HEAD 
      || { echo "This commit contains unformatted files! Run tools/run_format.sh to format them correctly."; false; }

Lint: 
  <<: *default_job
  stage: static analysis
  variables:
    <<: *default_cmake_variables
    CMAKE_BUILD_TYPE: Debug
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"
    CXX: clang++
    HESTIA_BUILD_TESTS: "ON" 
  before_script:
    - *install_dependencies
    - apt-get update -y && apt-get upgrade -y
    - apt-get install --no-install-recommends -y
      clang clang-tidy
    - *configure
  script: 
    - ./tools/run_lint.sh "${CMAKE_BUILD_DIR}"

#Documentation:
#   <<: *default_job
#   stage: build 
#   variables:
#       <<: *default_cmake_variables
#       HESTIA_BUILD_DOCUMENTATION: "ON"
#        HESTIA_DOC_DIR: ../../doc/parser/src
#    script:
#        - apt-get install --no-install-recommends -y
#            cmake
#            git
#            doxygen
#            graphviz
#            texlive texlive-font-utils
#        - *configure
#        - make -C build/doc
#            && git status
#            && git diff-index --quiet HEAD
#            || { echo "This commit contains changes to the documentation! Run doxygen-XML-parser on the project update the documentation."; false; }


Debug:
  <<: *default_job
  stage: build
  dependencies: []
  variables:
    <<: *default_cmake_variables
    CMAKE_BUILD_TYPE: Debug
      #  artifacts:
      #name: debug 
      #paths:
      #- "${CMAKE_BUILD_DIR}"

Release:
  <<: *default_job
  stage: build
  variables:
    <<: *default_cmake_variables
      #  artifacts:
      #name: release 
      #paths:
      #- "${CMAKE_BUILD_DIR}"

Unit_test:
  <<: *default_job
  stage: test
  variables:
    <<: *default_cmake_variables
    CMAKE_BUILD_TYPE: Release 
    HESTIA_BUILD_TESTS: "ON"
      #  artifacts:
      # name: release 
      #paths:
      #- "${CMAKE_BUILD_DIR}"
        #  dependencies:
        #- Release
  script:
    - *configure
    - *build
    - *test
