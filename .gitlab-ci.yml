stages:
  - static analysis
  - build
  - test
  - deploy

# CI variables
.variables:
  default_variables: &default_variables
    CMAKE_INSTALL_CACHE_DIR: "${CI_PROJECT_DIR}/.cache"
    CMAKE_BUILD_DIR: "${CI_PROJECT_DIR}/build"
    CMAKE_BUILD_TYPE: "Release"
    CXX: "g++"
    CC: "gcc"
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"
    HESTIA_PROJECT_VERSION: "${CI_NIGHTLY_VERSION}"
    HESTIA_BUILD_TESTS: "OFF"
    HESTIA_BUILD_DOCUMENTATION: "OFF"
    HESTIA_CODE_COVERAGE: "OFF"
    HESTIA_WITH_PHOBOS: "OFF"
    HESTIA_WITH_MOTR: "OFF"
    HESTIA_WITH_PROXYGEN: "OFF"
    MOTR_SRC_DIR: ""
    HESTIA_DEPS: "${CI_PROJECT_DIR}/infra/deps/rocky8"
    HESTIA_API_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}"
  nightly_variables: &nightly_variables
    <<: *default_variables
    HESTIA_BUILD_DOCUMENTATION: "ON"
    HESTIA_WITH_PHOBOS: "ON"
    HESTIA_WITH_MOTR: "ON"
    HESTIA_WITH_PROXYGEN: "ON"
    MOTR_SRC_DIR: "/cortx-motr"

# CI code snippets
.snippets:
  - &update_distro
    yum check-update -q || true;
    yum update -qy;
    yum install -qy epel-release;
    yum config-manager -q --set-enabled powertools;
  - &install_base_dependencies
    yum install -qy $(cat ${HESTIA_DEPS}/base);
    ${CI_PROJECT_DIR}/infra/scripts/bootstrap_cmake.sh $CMAKE_INSTALL_CACHE_DIR;
  - &configure
    mkdir -p "${CMAKE_BUILD_DIR}"
    && pushd "${CMAKE_BUILD_DIR}"
    && (
      set -x;
      $CMAKE_INSTALL_CACHE_DIR/bin/cmake ${CI_PROJECT_DIR}
      -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}"
      -DCMAKE_EXPORT_COMPILE_COMMANDS="${CMAKE_EXPORT_COMPILE_COMMANDS}"
      -DCMAKE_CXX_COMPILER="${CXX}"
      -DCMAKE_PROJECT_VERSION="${HESTIA_PROJECT_VERSION}"
      -DHESTIA_BUILD_TESTS="${HESTIA_BUILD_TESTS}"
      -DHESTIA_BUILD_DOCUMENTATION="${HESTIA_BUILD_DOCUMENTATION}"
      -DCODE_COVERAGE="${HESTIA_CODE_COVERAGE}"
      -DHESTIA_WITH_PROXYGEN="${HESTIA_WITH_PROXYGEN}"
      -DHESTIA_WITH_PHOBOS="${HESTIA_WITH_PHOBOS}"
      -DHESTIA_WITH_MOTR="${HESTIA_WITH_MOTR}"
      -DMOTR_SRC_DIR="${MOTR_SRC_DIR}"
    )
    && popd
  - &build
    make -C "${CMAKE_BUILD_DIR}" -j$(nproc)
  - &test
    make -C "${CMAKE_BUILD_DIR}" CTEST_OUTPUT_ON_FAILURE=1 test -j$(nproc)

.cache:
  cmake_install_cache: &cmake_install_cache
    key: "cmake_3.26.3"
    paths:
      - .cache/cmake/

.artifacts:
  build_artifacts: &build_artifacts
    name:  "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - build/
    expire_in: 30 min

.default_job: &default_job
  image: rockylinux:8
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG
      when: never # No need to re-run CI for tags
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never # The branch pipeline will run for updated MRs
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never # Master build are manual and pre-vetted
    - when: on_success
  tags:
    - docker
  variables:
    <<: *default_variables
  before_script:
    - *update_distro
    - *install_base_dependencies
  script:
    - *configure
    - *build
  cache:
    <<: *cmake_install_cache

Format:
  <<: *default_job
  stage: static analysis
  before_script:
    - *update_distro
    - yum install -qy $(cat ${HESTIA_DEPS}/format)
  script:
    - ./infra/scripts/run_format.sh
      && git status
      && git diff-index --quiet HEAD
      || { echo "This commit contains unformatted files! Run tools/run_format.sh to format them correctly."; false; }

Lint:
  <<: *default_job
  stage: static analysis
  variables:
    <<: *default_variables
    CMAKE_BUILD_TYPE: "Debug"
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"
    CXX: "clang++"
    CC: "clang"
    HESTIA_BUILD_TESTS: "ON"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - yum install -qy $(cat ${HESTIA_DEPS}/lint)
    - *configure
    - make -C "${CMAKE_BUILD_DIR}" hestia_fetch_lint_dependencies -j$(nproc)
  script:
    - make -C "${CMAKE_BUILD_DIR}" hestia_check_tidy -j$(nproc)

Release:
  <<: *default_job
  stage: build
  variables:
    <<: *default_variables
    HESTIA_BUILD_DOCUMENTATION: "ON"
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" doxygen
    - make -C "${CMAKE_BUILD_DIR}" package
  artifacts:
    name:  "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/*.rpm
    expire_in: 1 day

Unit_test:
  <<: *default_job
  stage: test
  dependencies:
    - Release
  variables:
    <<: *default_variables
    CMAKE_BUILD_TYPE: "Debug"
    CXX: "clang++"
    CC: "clang"
    HESTIA_BUILD_TESTS: "ON"
    HESTIA_CODE_COVERAGE: "ON"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - yum install -qy $(cat ${HESTIA_DEPS}/test)
  script:
    - *configure
    - *build
    - *test
#    - make -C "${CMAKE_BUILD_DIR}" ccov-hestia_unit_tests
#    - make -C "${CMAKE_BUILD_DIR}" ccov-report-hestia_unit_test

E2E_test:
  <<: *default_job
  stage: test
  dependencies:
    - Release
  before_script:
    - *update_distro
    - yum install -qy $(cat ${HESTIA_DEPS}/e2e_test);
    - pip3 install -r ${CI_PROJECT_DIR}/test/e2e_tests/requirements.txt;
  script:
    - python3 ${CI_PROJECT_DIR}/test/e2e_tests/run_e2e_tests.py --source_dir=${CI_PROJECT_DIR}
      --build_dir=${CMAKE_BUILD_DIR} --package_name=${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-Linux.rpm

# Scheduled Builds
.nightly_snippets:
  - &install_motr
    ${CI_PROJECT_DIR}/infra/scripts/ci/install_motr.sh
  - &install_phobos
    yum install -qy $(cat ${HESTIA_DEPS}/phobos);
    export PHOBOS_SRC=/phobos; cd /;
    ${CI_PROJECT_DIR}/infra/scripts/build_phobos.sh ${CI_PROJECT_DIR}/infra/cmake/patches;
  - &install_proxygen
    yum install -qy $(cat ${HESTIA_DEPS}/proxygen);

.default_nightly_job: &default_nightly_job
  <<: *default_job
  variables:
    <<: *nightly_variables
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
        && $CI_COMMIT_SHA != $CI_LAST_NIGHTLY_COMMIT_SHA # Only run if there are new commits
      when: on_success
  before_script:
    - *update_distro
    - *install_base_dependencies
    - *install_phobos
    - *install_motr # dev only
    - *install_proxygen
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" package
    - make -C "${CMAKE_BUILD_DIR}" package_source
    # TODO: Build and upload docs

Nightly_trigger:
  <<: *default_nightly_job
  image: alpine:latest
  stage: .pre
  before_script:
    - apk add jq
  script: # Only run if the last dev pipeline succeeded (the scheduled pipeline is index 0)
    - 'wget --header "PRIVATE-TOKEN: $(cat $CI_CUSTOM_JOB_TOKEN)"
      "$HESTIA_API_URL/pipelines?ref=devel&source=push&per_page=1" -O res.json'
    - jq . res.json # For Debug
    - 'if [ $(jq --raw-output ''.[] | .status'' res.json)  != "success" ]; then exit 1; fi;'

Nightly_build:
  <<: *default_nightly_job
  stage: build
  artifacts:
    name:  "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/*.rpm
      - ${CMAKE_BUILD_DIR}/*.tar.gz
    expire_in: 1 hour

Nightly_E2E:
  <<: *default_nightly_job
  stage: test
  services:
    - name: postgres:15.3
      alias: phobosdb
      entrypoint: ["docker-entrypoint.sh"]
      command: ["postgres"]
      variables:
        POSTGRES_HOST_AUTH_METHOD: "trust"
        POSTGRES_PASSWORD: "phobos"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - yum install -qy $(cat ${HESTIA_DEPS}/e2e_test);
    - *install_phobos
    - *install_proxygen
    - pip3 install -r ${CI_PROJECT_DIR}/test/e2e_tests/requirements.txt;
    - pip3 install -r ${CI_PROJECT_DIR}/test/e2e_tests/phobos_requirements.txt;
  script:
    - python3 ${CI_PROJECT_DIR}/test/e2e_tests/run_e2e_tests.py
      --with_phobos --source_dir=${CI_PROJECT_DIR} --build_dir=${CMAKE_BUILD_DIR}
      --package_name=${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-Linux.rpm

Nightly_deploy:
  <<: *default_nightly_job
  image: alpine:latest
  stage: deploy
  before_script:
    - apk add curl jq
  script:
    - ${CI_PROJECT_DIR}/infra/scripts/ci/nightly_deploy.sh
  artifacts:
    name:  "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/*.rpm
      - ${CMAKE_BUILD_DIR}/*.tar.gz
    expire_in: 1 month

# Note: To increment major release version update the CI variable manually
Master_build:
  <<: *default_nightly_job
  rules:
    - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "push"
      when: manual
  stage: build
  variables:
    <<: *nightly_variables
    HESTIA_PROJECT_VERSION: "${CI_RELEASE_VERSION}"
  artifacts:
    name:  "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/*.rpm
      - ${CMAKE_BUILD_DIR}/*.tar.gz
    expire_in: 1 hour

Master_deploy:
  <<: *default_nightly_job
  image: alpine:latest
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "push"
      when: on_success
  before_script:
    - apk add curl
  script: # Tag release, upload matching packages
    - ${CI_PROJECT_DIR}/infra/scripts/ci/master_deploy.sh